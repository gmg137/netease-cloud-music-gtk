
name: Build on multi platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, macos-12]
        build_type: [Release]
        pm: [apt, brew]
        ssl: [libssl-dev, openssl@3]
        gtk: [libgtk-4-dev libadwaita-1-dev, gtk4 libadwaita]
        decoder: [libgstreamer-plugins-bad1.0-dev, gstreamer-development]
        include:
          - os: macos-12
            pm: brew
            ssl: openssl@3
            gtk: gtk4 libadwaita
            decoder: gstreamer-development
          - os: ubuntu-latest
            pm: apt
            ssl: libssl-dev
            gtk: libgtk-4-dev libadwaita-1-dev
            decoder: libgstreamer-plugins-bad1.0-dev

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure dependency
      run: |
        ${{ matrix.pm}} install meson dbus \
        ${{ matrix.ssl }} \
        ${{ matrix.gtk }} \
        ${{ matrix.decoder }}
        #-DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        #-S ${{ github.workspace }}

    - name: Build
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        meson ${{ steps.strings.outputs.build-output-dir }}
        cd ${{ steps.strings.outputs.build-output-dir }}
        ninja

